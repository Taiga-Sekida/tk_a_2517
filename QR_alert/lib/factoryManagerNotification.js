import fs from 'fs';
import path from 'path';

// Â∑•Â†¥Ë≤¨‰ªªËÄÖÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
class FactoryManagerNotification {
  constructor() {
    this.notificationsDir = path.join(process.cwd(), 'notifications');
    this.emergencyNotifications = [];
    
    // ÈÄöÁü•„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if (!fs.existsSync(this.notificationsDir)) {
      fs.mkdirSync(this.notificationsDir, { recursive: true });
    }
  }

  // Á∑äÊÄ•ÈÄöÁü•„ÇíÈÄÅ‰ø°
  sendEmergencyNotification(robotId, dangerDetails) {
    const timestamp = new Date();
    const notification = {
      id: `EMERGENCY_${robotId}_${timestamp.getTime()}`,
      timestamp: timestamp.toISOString(),
      robotId,
      type: 'EMERGENCY_STOP_REQUIRED',
      title: 'üö® Á∑äÊÄ•ÂÅúÊ≠¢Ë¶ÅË´ã',
      message: `„É≠„Éú„ÉÉ„Éà ${robotId} „ÅßÈÄ£Á∂öÂç±Èô∫Áä∂Ê≥Å„ÅåÊ§úÁü•„Åï„Çå„Åæ„Åó„Åü„ÄÇÂ∑•Â†¥Ë≤¨‰ªªËÄÖ„Å´„Çà„ÇãÂç≥Â∫ß„ÅÆÂÅúÊ≠¢Êìç‰Ωú„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ`,
      details: dangerDetails,
      severity: 'CRITICAL',
      actionRequired: 'IMMEDIATE_STOP',
      containerTime: timestamp.toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' }),
      dockerTime: timestamp.toISOString()
    };

    // „É°„É¢„É™„Å´‰øùÂ≠ò
    this.emergencyNotifications.push(notification);
    
    // „Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    this.saveNotificationToFile(notification);
    
    // „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞„Å´Ë®òÈå≤
    this.logEmergencyEvent(notification);
    
    console.log(`üö® Á∑äÊÄ•ÈÄöÁü•ÈÄÅ‰ø°: ${robotId} - Â∑•Â†¥Ë≤¨‰ªªËÄÖ„Å´„Çà„ÇãÂÅúÊ≠¢„ÅåÂøÖË¶Å`);
    
    return notification;
  }

  // ÈÄöÁü•„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
  saveNotificationToFile(notification) {
    try {
      const filename = `emergency_notification_${notification.id}.txt`;
      const filePath = path.join(this.notificationsDir, filename);
      
      const content = this.generateNotificationContent(notification);
      fs.writeFileSync(filePath, content, 'utf8');
      
      console.log(`üìÑ Á∑äÊÄ•ÈÄöÁü•„Éï„Ç°„Ç§„É´‰øùÂ≠ò: ${filename}`);
    } catch (error) {
      console.error('ÈÄöÁü•„Éï„Ç°„Ç§„É´‰øùÂ≠ò„Ç®„É©„Éº:', error);
    }
  }

  // ÈÄöÁü•ÂÜÖÂÆπ„ÇíÁîüÊàê
  generateNotificationContent(notification) {
    let content = '';
    content += '='.repeat(80) + '\n';
    content += 'üö® Â∑•Â†¥Ë≤¨‰ªªËÄÖÂêë„ÅëÁ∑äÊÄ•ÈÄöÁü•\n';
    content += '='.repeat(80) + '\n\n';
    
    content += `ÈÄöÁü•ID: ${notification.id}\n`;
    content += `„É≠„Éú„ÉÉ„ÉàID: ${notification.robotId}\n`;
    content += `ÈÄöÁü•„Çø„Ç§„Éó: ${notification.type}\n`;
    content += `ÈáçË¶ÅÂ∫¶: ${notification.severity}\n`;
    content += `ÂøÖË¶Å„Ç¢„ÇØ„Ç∑„Éß„É≥: ${notification.actionRequired}\n`;
    content += `ÈÄöÁü•ÊôÇÂàª: ${notification.containerTime}\n`;
    content += `ISOÊôÇÂàª: ${notification.dockerTime}\n\n`;
    
    content += '-'.repeat(60) + '\n';
    content += 'üìã ÈÄöÁü•ÂÜÖÂÆπ\n';
    content += '-'.repeat(60) + '\n\n';
    
    content += `„Çø„Ç§„Éà„É´: ${notification.title}\n\n`;
    content += `„É°„ÉÉ„Çª„Éº„Ç∏: ${notification.message}\n\n`;
    
    content += '-'.repeat(60) + '\n';
    content += 'üîç Âç±Èô∫Áä∂Ê≥ÅË©≥Á¥∞\n';
    content += '-'.repeat(60) + '\n\n';
    
    if (notification.details && notification.details.length > 0) {
      notification.details.forEach((detail, index) => {
        content += `${index + 1}. ${detail.partName}\n`;
        content += `   Ê∏©Â∫¶: ${detail.temperature.toFixed(1)}¬∞C\n`;
        content += `   ÊåØÂãï: ${detail.vibration.toFixed(3)}\n`;
        content += `   ÊπøÂ∫¶: ${detail.humidity.toFixed(1)}%\n`;
        content += `   ÈÅãËª¢ÊôÇÈñì: ${detail.operatingHours}ÊôÇÈñì\n`;
        content += `   Âç±Èô∫„É¨„Éô„É´: ${detail.dangerLevel}\n`;
        content += `   Ê§úÁü•ÊôÇÂàª: ${detail.containerTime}\n\n`;
      });
    }
    
    content += '-'.repeat(60) + '\n';
    content += '‚ö†Ô∏è Â∑•Â†¥Ë≤¨‰ªªËÄÖ„Å∏„ÅÆÊåáÁ§∫\n';
    content += '-'.repeat(60) + '\n\n';
    
    content += '1. Âç≥Â∫ß„Å´„É≠„Éú„ÉÉ„Éà„ÅÆÈÅãËª¢„ÇíÂÅúÊ≠¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n';
    content += '2. ÂÆâÂÖ®Á¢∫Ë™ç„ÇíÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n';
    content += '3. „É°„É≥„ÉÜ„Éä„É≥„Çπ„ÉÅ„Éº„É†„Å´ÈÄ£Áµ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n';
    content += '4. Ë©≥Á¥∞„Å™ÁÇπÊ§ú„ÇíÂÆüÊñΩ„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n';
    content += '5. ÂÜçÈñãÂâç„Å´ÂÆâÂÖ®Á¢∫Ë™ç„ÇíÂÆå‰∫Ü„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n\n';
    
    content += '='.repeat(80) + '\n';
    content += 'End of Emergency Notification\n';
    content += '='.repeat(80) + '\n';
    
    return content;
  }

  // „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞„Å´Ë®òÈå≤
  logEmergencyEvent(notification) {
    try {
      const logPath = path.join(this.notificationsDir, 'emergency_log.txt');
      const logEntry = `[${notification.dockerTime}] EMERGENCY: ${notification.robotId} - ${notification.type} - Action: ${notification.actionRequired}\n`;
      
      fs.appendFileSync(logPath, logEntry, 'utf8');
    } catch (error) {
      console.error('Á∑äÊÄ•„É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº:', error);
    }
  }

  // ÈÄöÁü•Â±•Ê≠¥„ÇíÂèñÂæó
  getNotificationHistory() {
    return this.emergencyNotifications.slice(-20); // ÊúÄÊñ∞20‰ª∂
  }

  // ÈÄöÁü•Áµ±Ë®à„ÇíÂèñÂæó
  getNotificationStats() {
    const total = this.emergencyNotifications.length;
    const today = new Date().toDateString();
    const todayCount = this.emergencyNotifications.filter(n => 
      new Date(n.timestamp).toDateString() === today
    ).length;
    
    return {
      totalNotifications: total,
      todayNotifications: todayCount,
      lastNotification: this.emergencyNotifications[this.emergencyNotifications.length - 1] || null
    };
  }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ
let factoryManagerNotification = null;

export function getFactoryManagerNotification() {
  if (!factoryManagerNotification) {
    factoryManagerNotification = new FactoryManagerNotification();
  }
  return factoryManagerNotification;
}

export default FactoryManagerNotification;
